import math


def RungeKutta2(f,x0,y0,h,n,x_values,b):
    
    '''''
    B = 1 corresponde ao metodo do ponto medio de Euler.
    B = 1/2 corresponde ao metodo de Heun
    B = 2/3 corresponde ao metodo de Ralston

    Porém, não testei.
    '''''

    a = 1 - b
    p = 1 / ( 2 * b)
    q = p
    for k in range(1,n):
        m1 = f(x0,y0)
        m2 = f(x0 + h/2, y0 + (h/2) * m1)
        m3 = f(x0 + h/2, y0 + (h/2) * m2)
        m4 = f(x0 + h, y0 + h * m3)
        y0 = y0 + h * (m1+2 * m2 + 2 * m3 + m4)/6
        h = x_values[k] - x_values[k-1]
        x0 = x_values[k-1]
        yield[x0,y0]

    m1 = f(x0,y0)
    m2 = f(x0 + h/2, y0 + (h/2) * m1)
    m3 = f(x0 + h/2, y0 + (h/2) * m2)
    m4 = f(x0 + h, y0 + h * m3)
    y0 = y0 + h * (m1+2 * m2 + 2 * m3 + m4)/6
    h = x_values[n-1] - x_values[n-2]
    x0 = x_values[k-1]
    yield[x0,y0]



    
# modificar valores de r e lambd    
def f(p, t):
    r = 0.14687
    lambd = 0.01563
    k = r * lambd
    return k * (1 - t)

# modificar valor de p0    
t0 = 0
p0 = 0.0013
h = 1
n = 150
x_values = [0.11243, 1.0304, 1.64553, 2.24201, 2.81838, 3.77965, 4.27643, 5.13089, 5.59816, 6.27148, 6.89007, 7.78714, 8.16129, 9.11027, 9.48895, 10.50261, 11.03579, 11.52467, 12.16706, 13.06965, 13.85096, 14.35356, 15.19062, 15.65739, 16.15824, 16.79009, 17.58746, 18.54677, 18.74901, 19.45126, 20.33611, 20.75837, 21.46851, 22.31858, 23.24071, 23.49052, 24.11825, 25.20257, 25.88372, 26.25453, 27.05168, 27.47754, 28.11493, 29.16935, 29.82284, 30.38539, 30.89739, 31.77289, 32.46367, 33.08563, 33.87207, 34.18808, 34.82442, 35.88838, 36.45066, 37.26411, 37.5194, 38.47781, 38.90447, 39.43778, 40.36347, 41.21636, 41.68558, 42.21797, 43.00473, 43.87079, 44.46312, 44.73449, 45.56934, 46.35815, 47.07798, 47.57329, 48.57826, 48.85955, 49.73827, 50.46234, 51.24738, 51.59666, 52.53865, 53.0596, 53.56571, 54.51434, 54.98606, 55.89836, 56.43208, 56.84244, 57.57648, 58.1778, 59.04312, 59.53348, 60.22324, 61.22753, 61.55519, 62.50777, 62.81124, 63.80465, 64.38162, 65.25891, 65.55375, 66.2591, 67.0269, 67.73, 68.19325, 69.13693, 69.45458, 70.17751, 70.76097, 71.8468, 72.40295, 73.0054, 73.64237, 74.42088, 75.01557, 75.74373, 76.06852, 77.07744, 77.42719, 78.38208, 78.87554, 79.6039, 80.42469, 81.05334, 81.42778, 82.50829, 82.99997, 83.7964, 84.35022, 85.17162, 85.87738, 86.32808, 86.82929, 87.54299, 88.33619, 88.75084, 89.88881, 90.41582, 90.74006, 91.65986, 92.35773, 92.94893, 93.64998, 94.11416, 94.75429, 95.92183, 96.21804, 97.2038, 97.45289, 98.09108, 99.15323, 99.83175]
r = RungeKutta2(f, t0, p0, h, n,x_values,0.00775)
runge = []
for yi in r:
    runge.append(yi[1])

    
# solução exata:
# modificar valores de r, lambd e coef 
def p(t):
    r = 0.14687
    lambd = 0.01563
    k = r * lambd
    # resolver:
    # solve p'(t) = k * (1 - p(t)), p(0) = p0
    # no wolfram, substituindo o valor de p0 dado na questao
    coef = 0.9987
    return 1 - coef * math.exp(-k*t)
    
for i in range(150):
    print(f"{runge[i]}, {abs(runge[i] - p(i))},")